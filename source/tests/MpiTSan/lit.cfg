# -*- Python -*- vim: set ft=python ts=4 sw=4 expandtab tw=79:
# Configuration file for the 'lit' test runner.

import os
import re
import subprocess
import lit.formats

# Tell pylint that we know config and lit_config exist somewhere.
if 'PYLINT_IMPORT' in os.environ:
    config = object()
    lit_config = object()

def append_dynamic_library_path(path):
    if config.operating_system == 'Windows':
        name = 'PATH'
        sep = ';'
    elif config.operating_system == 'Darwin':
        name = 'DYLD_LIBRARY_PATH'
        sep = ':'
    else:
        name = 'LD_LIBRARY_PATH'
        sep = ':'
    if name in config.environment:
        config.environment[name] = path + sep + config.environment[name]
    else:
        config.environment[name] = path

# name: The name of this test suite.
config.name = 'MpiTSan'

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.c', '.cpp']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root object directory where output is placed
config.test_exec_root = config.project_obj_root

# test format
config.test_format = lit.formats.ShTest()

# compiler flags
config.test_flags = " -I " + config.test_source_root + \
    " " + config.test_extra_flags

# Allow XFAIL to work
config.target_triple = [ ]
for feature in config.test_compiler_features:
    config.available_features.add(feature)


# Disable OMPT tests if FileCheck was not found
if config.test_filecheck == "":
    lit_config.note("Not testing XMPT because FileCheck was not found")

if 'Linux' in config.operating_system:
    config.available_features.add("linux")

# to run with icc INTEL_LICENSE_FILE must be set
if 'INTEL_LICENSE_FILE' in os.environ:
    config.environment['INTEL_LICENSE_FILE'] = os.environ['INTEL_LICENSE_FILE']
if 'OMP_NUM_THREADS' in os.environ:
    config.environment['OMP_NUM_THREADS'] = os.environ['OMP_NUM_THREADS']


config.substitutions.append(("%must-compile-and-run", \
    "%must-compile && %must-run"))
    
config.substitutions.append(("%must-compile", \
    "cp %s %T && cd %T && %mpicc %flags -fopenmp -g -fsanitize=thread %basename_t -o %t"))

config.substitutions.append(("%must-run", "env TSAN_OPTIONS='exitcode=0 log_path=stdout suppressions=" + config.test_srcdir + "/suppressions2.txt' %mustrun-cmd %mustrun-flags --must:clean --must:hybrid --must:temp %t.dir %t"))
#config.substitutions.append(("%must-run", "env TSAN_OPTIONS='exitcode=0 log_path=stdout' %mustrun-cmd %mustrun-flags --must:clean --must:temp %t.dir %t"))
#config.substitutions.append(("%must-run", "env TSAN_OPTIONS='exitcode=0' %mustrun-cmd %mustrun-flags --must:clean --must:temp %t.dir %t"))

config.substitutions.append(("%mustrun-cmd", config.test_mustrun))
config.substitutions.append(("%mustrun-flags", config.mustrun_execution_flags))
config.substitutions.append(("%mpicc", config.test_mpicc_compiler))
config.substitutions.append(("%flags", config.test_flags))
config.substitutions.append(("%np_flag", config.mpiexec_numproc_flag))
config.substitutions.append(("FileCheck", config.test_filecheck))

